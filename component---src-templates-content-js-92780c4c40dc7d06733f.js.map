{"version":3,"file":"component---src-templates-content-js-92780c4c40dc7d06733f.js","mappings":"iLAgDA,MAtCY,IAA2D,IAA1D,MAAEA,EAAK,YAAEC,EAAW,SAAEC,EAAQ,SAAEC,EAAQ,SAAEC,GAAU,EAC7D,MAAQJ,MAAOK,EAAcJ,YAAaK,EAAkB,MAAEC,EAAK,QAAEC,EAAO,cAAEC,ICRjEC,EAAAA,EAAAA,gBAAe,cAchBC,KAAKC,aDLXC,EATV,SAAwBT,EAAUG,GAC9B,OAAIH,EACOA,aAAQ,EAARA,EAAUU,gBAAgBC,gBAAgBC,OAAOC,SAASC,IAE9DX,CACX,CAI0BY,CAAef,EAASG,GACxCa,EAAM,CACRpB,MAAOA,GAASK,EAChBJ,YAAaA,GAAeK,EAC5BC,MAAM,GAAIC,EAAUK,EACpBQ,IAAI,GAAIb,GAAUN,GAAQ,IAC1BO,iBAGJ,OACI,gCACI,6BAAQW,EAAIpB,OACZ,wBAAMsB,KAAK,cAAcC,QAASH,EAAInB,cACtC,wBAAMqB,KAAK,QAAQC,QAASH,EAAIb,QAChC,wBAAMe,KAAK,eAAeC,QAAQ,wBAClC,wBAAMD,KAAK,gBAAgBC,QAASH,EAAIpB,QACxC,wBAAMsB,KAAK,cAAcC,QAASH,EAAIC,MACtC,wBAAMC,KAAK,sBAAsBC,QAASH,EAAInB,cAC9C,wBAAMqB,KAAK,gBAAgBC,QAASH,EAAIb,QACxC,wBAAMe,KAAK,kBAAkBC,QAASH,EAAIX,gBAC1C,wBAAMe,SAAS,SAASD,QAASH,EAAIC,IAAII,aACzC,wBAAMD,SAAS,WAAWD,QAASH,EAAIpB,QACvC,wBAAMwB,SAAS,UAAUD,QAAQ,YACjC,wBAAMC,SAAS,eAAeD,QAAQ,iBACtC,wBAAMC,SAAS,iBAAiBD,QAASH,EAAInB,cAC7C,wBAAMuB,SAAS,YAAYD,QAAQ,UACnC,wBAAMC,SAAS,WAAWD,QAASH,EAAIb,MAAMkB,aAC7C,wBAAMD,SAAS,eAAeD,QAAQ,oCACtC,wBAAMC,SAAS,iBAAiBD,QAAQ,QACxC,wBAAMC,SAAS,iBAAiBD,QAAQ,QACxC,wBAAMC,SAAS,gBAAgBD,QAAQ,eACtCpB,EACF,C,kJEtCI,SAASuB,EAAgB,GAA2B,IAA1BC,MAAM,eAACC,IAAgB,EAC5D,MAAM,YAACC,EAAW,KAAEC,GAAQF,EAC5B,OACI,gBAAC,IAAM,KACH,gBAAC,IAAS,CAACG,UAAW,QAClB,gBAAC,IAAG,CAACA,UAAW,aACZ,2BACI,sBAAIA,UAAU,2BAA2BF,EAAY7B,OACrD,sBAAI+B,UAAU,2BAA2BF,EAAYG,SAEzD,uBAAKD,UAAU,gCAAgCE,wBAAyB,CAACC,OAAQJ,OAKrG,CAiBO,SAASK,EAAK,GAA2B,IAA1BR,MAAM,eAACC,IAAgB,EACzC,MAAM,YAACC,GAAeD,EACtB,OACI,gBAAC,IAAG,CAAC5B,MAAO6B,EAAY7B,OAEhC,C","sources":["webpack://bronze-age-index/./src/components/structure/SEO.js","webpack://bronze-age-index/./src/hooks/use-site-metadata.js","webpack://bronze-age-index/./src/templates/content.js"],"sourcesContent":["import React from \"react\"\nimport { useSiteMetadata } from \"../../hooks/use-site-metadata\"\n\nfunction createSeoImage(featured, image) {\n    if (featured) {\n        return featured?.childImageSharp.gatsbyImageData.images.fallback.src;\n    }\n    return image;\n}\n\nconst Seo = ({ title, description, pathname, children, featured }) => {\n    const { title: defaultTitle, description: defaultDescription, image, siteUrl, twitterHandle } = useSiteMetadata()\n    const featuredImage = createSeoImage(featured,image);\n    const seo = {\n        title: title || defaultTitle,\n        description: description || defaultDescription,\n        image: `${siteUrl}${featuredImage}`,\n        url: `${siteUrl}${pathname || ``}`,\n        twitterHandle,\n    }\n\n    return (\n        <>\n            <title>{seo.title}</title>\n            <meta name=\"description\" content={seo.description} />\n            <meta name=\"image\" content={seo.image} />\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\n            <meta name=\"twitter:title\" content={seo.title} />\n            <meta name=\"twitter:url\" content={seo.url} />\n            <meta name=\"twitter:description\" content={seo.description} />\n            <meta name=\"twitter:image\" content={seo.image} />\n            <meta name=\"twitter:creator\" content={seo.twitterHandle} />\n            <meta property=\"og:url\" content={seo.url.toString()} />\n            <meta property=\"og:title\" content={seo.title} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"og:site_name\" content=\"Museologi.st\" />\n            <meta property=\"og:description\" content={seo.description} />\n            <meta property=\"og:locale\" content=\"en-gb\" />\n            <meta property=\"og:image\" content={seo.image.toString()} />\n            <meta property=\"og:image:alt\" content=\"An image representing this post\" />\n            <meta property=\"og:image:width\" content=\"600\"/>\n            <meta property=\"og:image:width\" content=\"600\" />\n            <meta property=\"og:image:type\" content=\"image/jpeg\" />\n            {children}\n        </>\n    )\n}\n\nexport default Seo","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n    const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n          description\n          twitterHandle\n          image\n          siteUrl\n        }\n      }\n    }\n  `)\n\n    return data.site.siteMetadata\n}","import {graphql} from \"gatsby\";\nimport * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport {Container, Row} from \"react-bootstrap\";\nimport Seo from \"../components/structure/SEO\";\n\nexport default function ContentTemplate({data: {markdownRemark}}) {\n    const {frontmatter, html} = markdownRemark;\n    return (\n        <Layout>\n            <Container className={\"mt-4\"}>\n                <Row className={\"post-body\"}>\n                    <div>\n                        <h1 className=\"text-black fw-bold mt-4\">{frontmatter.title}</h1>\n                        <h2 className=\"text-black fw-bold mt-4\">{frontmatter.author}</h2>\n                    </div>\n                    <div className=\"post-body bg-white text-black\" dangerouslySetInnerHTML={{__html: html}}/>\n                </Row>\n            </Container>\n        </Layout>\n    );\n}\n\n\nexport const pageQuery = graphql`\n    query ($id: String!) {\n        markdownRemark(id: { eq: $id }, frontmatter: {section: {eq: \"content\"}}) {\n            html\n            id\n            frontmatter {\n                slug\n                title\n                author\n            }\n        }\n    }\n`;\n\nexport function Head({data: {markdownRemark}}) {\n    const {frontmatter} = markdownRemark;\n    return (\n        <Seo title={frontmatter.title}/>\n    )\n}\n"],"names":["title","description","pathname","children","featured","defaultTitle","defaultDescription","image","siteUrl","twitterHandle","useStaticQuery","site","siteMetadata","featuredImage","childImageSharp","gatsbyImageData","images","fallback","src","createSeoImage","seo","url","name","content","property","toString","ContentTemplate","data","markdownRemark","frontmatter","html","className","author","dangerouslySetInnerHTML","__html","Head"],"sourceRoot":""}